// Generated by CoffeeScript 1.3.3
(function() {
  var errorCallback, precision, sign, successCallback;

  window.AudioContext = window.AudioContext || window.mozAudioContext || window.webkitAudioContext || window.msAudioContext || window.oAudioContext;

  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

  sign = function(x) {
    return x > 0;
  };

  precision = function(x) {
    return Math.floor(x * 100) / 100;
  };

  successCallback = function(stream) {
    var actualFrequency, analyser, canvas, context, crossings, ctx, debugCrossings, debugFrequency, frequency, frequencyIterator, frequencySmoothing, hp, i, input, lp, scriptNode, sourceNode;
    context = new AudioContext;
    sourceNode = context.createMediaStreamSource(stream);
    analyser = context.createAnalyser();
    analyser.smoothingTimeConstant = 0.5;
    analyser.fftSize = 2048;
    lp = context.createBiquadFilter();
    lp.type = lp.LOWPASS;
    lp.frequency = 4000;
    lp.Q = 0.1;
    hp = context.createBiquadFilter();
    hp.type = hp.HIGHPASS;
    hp.frequency = 20;
    hp.Q = 0.1;
    scriptNode = context.createScriptProcessor(1024, 1, 1);
    actualFrequency = document.querySelector(".frequency .actual");
    debugFrequency = document.querySelector(".debug .frequency");
    debugCrossings = document.querySelector(".debug .crossings");
    canvas = document.querySelector("canvas");
    ctx = canvas.getContext("2d");
    input = null;
    crossings = null;
    frequency = null;
    frequencySmoothing = new Array(10);
    frequencySmoothing = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = frequencySmoothing.length; _i < _len; _i++) {
        i = frequencySmoothing[_i];
        _results.push(0);
      }
      return _results;
    })();
    frequencyIterator = 0;
    scriptNode.onaudioprocess = function(e) {
      var avgFrequency, p, _i, _j, _k, _l, _len, _ref, _ref1, _ref2;
      input = e.inputBuffer.getChannelData(0);
      input = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = input.length; _i < _len; _i++) {
          i = input[_i];
          _results.push(Math.floor(i * 1000));
        }
        return _results;
      })();
      for (p = _i = 0, _ref = input.length - 1; _i < _ref; p = _i += 1) {
        if (sign(input[p]) !== sign(input[p + 1])) {
          crossings++;
        }
      }
      canvas.width = canvas.width;
      ctx.fillStyle = "#666666";
      ctx.fillRect(0, canvas.height / 2, 1000, 1);
      ctx.fillStyle = "#ffffff";
      for (i = _j = 0, _ref1 = input.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        ctx.fillRect(i, canvas.height / 2 + Math.floor(input[i]), 1, 1);
      }
      crossings = 0;
      for (p = _k = 0, _ref2 = input.length - 1; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; p = 0 <= _ref2 ? ++_k : --_k) {
        if (sign(input[p]) !== sign(input[p + 1])) {
          crossings++;
        }
      }
      frequency = (crossings / 2) / (input.length / context.sampleRate);
      frequencySmoothing[frequencyIterator++ % frequencySmoothing.length] = frequency;
      avgFrequency = 0;
      for (_l = 0, _len = frequencySmoothing.length; _l < _len; _l++) {
        i = frequencySmoothing[_l];
        avgFrequency += i;
      }
      avgFrequency = avgFrequency / frequencySmoothing.length;
      actualFrequency.innerHTML = precision(avgFrequency);
      debugFrequency.innerHTML = precision(frequency);
      return debugCrossings.innerHTML = crossings;
      /*
      		
      		average = 0
      		for i in [0...audioData.length]
      			average += audioData[i]
      		average = average / audioData.length
      		
      		max = 0
      		for i in [0...audioData.length]
      			max = Math.max(max, audioData[i])
      
      
      
      		numSamples = audioData.length;
      		numCrossing = 0;
      		for p in [0...numSamples-1]
      			if (audioData[p] > 0 && audioData[p + 1] <= 0) || (audioData[p] < 0 && audioData[p + 1] >= 0)
      				numCrossing++
      
      
      		#console.log numCrossing
      
      
      		numSecondsRecorded = numSamples / context.sampleRate
      		numCycles = numCrossing / 2
      		frequency = numCycles / numSecondsRecorded
      
      
      		#actualFrequency.innerHTML = (array[0] + array[array.length-1]) / 2
      		actualFrequency.innerHTML = frequency
      
      
      		canvas.width = canvas.width;
      		ctx.fillStyle = "#ffffff"
      
      
      		# draw canvas
      		for i in [0...audioData.length]
      			ctx.fillRect i, (canvas.height - audioData[i]), 1, 1
      */

    };
    sourceNode.connect(scriptNode);
    lp.connect(hp);
    hp.connect(scriptNode);
    return scriptNode.connect(context.destination);
  };

  errorCallback = function(stream) {
    return alert("Bummer");
  };

  if (navigator.getUserMedia) {
    navigator.getUserMedia({
      video: false,
      audio: true
    }, successCallback, errorCallback);
  }

}).call(this);
